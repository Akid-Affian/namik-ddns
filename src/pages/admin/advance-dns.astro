---
import Layout from "@components/Layout.astro";
import { verifySession } from "@lib/verifySession";
import { getUserRole } from "@lib/checkUserRole";
import { getCookieValue } from "@lib/utils/cookies";
import Modal from "@components/v2/Modal.astro";

// Fetching the base domain data
const cookies = Astro.request?.headers.get("cookie") || "";
const baseDomainsURL = new URL("/api/v2/base-domains", Astro.url).href;
const selectedDomain = Astro.url.searchParams.get("zone") || ""; 

const response = await fetch(baseDomainsURL, {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    "Cookie": cookies,
  },
});
const { baseDomain, additionalBaseDomains } = await response.json();

// User session and role validation
const authToken = getCookieValue(cookies, "auth_token");
if (!authToken || !verifySession(authToken)) {
    return Astro.redirect("/");
}

const userRole = await getUserRole(Astro);
if (userRole !== "Super-Admin") {
    return Astro.redirect("/");
}

// If no domain is selected, redirect to the first available domain
if (!selectedDomain) {
    const firstDomain = baseDomain.domain || (additionalBaseDomains.length > 0 ? additionalBaseDomains[0].domain : null);
    if (firstDomain) {
        return Astro.redirect(`/admin/advance-dns?zone=${firstDomain}`);
    }
}

// Fetch DNS records if a domain is selected
let dnsRecords = [];
if (selectedDomain) {
  const dnsResponse = await fetch(new URL(`/api/v2/admin/advance-dns?zone=${selectedDomain}`, Astro.url).href, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Cookie": cookies,
    },
  });
  
  const dnsData = await dnsResponse.json();
  if (dnsData.success) {
    dnsRecords = dnsData.dnsRecords;
  }
}
---

<Layout title="Advance DNS Management">
    <main class="flex justify-center items-center mb-8 p-6">
        <div class="p-6 rounded-lg shadow-lg w-full max-w-6xl bg-[#2C3333]">
            <h1 class="text-white text-xl md:text-2xl text-center mb-4">
                Advanced DNS Management
            </h1>
            <p class="text-white text-center mb-6 text-lg">
                This is the Advanced DNS Management page. You can manage or add system DNS settings here. This feature is only available to Super Admins and is experimental, so expect changes in the future.            </p>
            <div class="flex justify-center items-center mb-4">
                <a
                href="/admin"
                class="bg-[#2C6D6A] hover:bg-[#265E5A] text-gray-100 px-4 py-2 rounded-md inline-block align-middle"
            >
                Go Back to Admin Dashboard
            </a>
            </div>

            <!-- Domain Selector -->
            <form method="GET" class="mb-6">
                <label for="domainSelector" class="text-gray-100">Choose Domain:</label>
                <select id="domainSelector" name="zone" class="ml-2 p-2 bg-[#171717] text-white rounded" onchange="this.form.submit()">
                  <!-- Main Base Domain -->
                  <option value={baseDomain.domain} selected={selectedDomain === baseDomain.domain}>{baseDomain.domain}</option>
  
                  <!-- Additional Base Domains -->
                  {additionalBaseDomains.map((domain: { domain: string }) => (
                    <option value={domain.domain} selected={selectedDomain === domain.domain}>{domain.domain}</option>
                  ))}
                </select>
            </form>

            <!-- DNS Records Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full bg-[#2C3333] text-white mt-6">
                  <thead>
                    <tr class="bg-[#3E7059]">
                    <th class="py-2 px-4 text-left">Type</th>
                      <th class="py-2 px-4 text-left">Name</th>
                      <th class="py-2 px-4 text-left">Value</th>
                      <th class="py-2 px-4 text-left">TTL</th>
                      <th class="py-2 px-4 text-left">Priority</th>
                      <th class="py-2 px-4 text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {dnsRecords.length > 0 ? (
                      dnsRecords.map((record: { name: string; record_type: string; contents: string[]; ttl: number; ids: number[] }) => (
                        <tr class="border-b border-gray-600">
                          <td class="py-2 px-4">{record.record_type}</td>
                          <td class="py-2 px-4">{record.name}</td>
                          <td class="py-2 px-4">
                            {record.contents.join(", ")} <!-- Handle comma-separated contents -->
                          </td>
                          <td class="py-2 px-4">{record.ttl}</td>
                          <td class="py-2 px-4">
                            {record.record_type === 'MX' ? record.contents[0].split(' ')[0] : 'N/A'} <!-- Show priority for MX records -->
                          </td>
                          <td class="py-2 px-4">
                            <button
                              data-open-modal="add-advance-dns-modal"
                              class="bg-[#3E7059] hover:bg-[#2b5944] text-white px-3 py-1 rounded"
                            >
                              Edit
                            </button>
                            <button
                      data-open-modal="delete-advance-dns-modal"
                      data-record-name={record.name}
                      data-record-type={record.record_type}
                      data-record-content={record.contents.join(", ")}
                      data-record-ttl={record.ttl}
                      class="bg-[#B52626] hover:bg-[#9C2121] text-white px-3 py-1 rounded ml-2"
                        >
                        Delete
                      </button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colspan="6" class="py-2 px-4 text-center">No DNS records found for {selectedDomain}</td>
                      </tr>
                    )}
                  </tbody>                  
                </table>
            </div>

            <!-- Add New Record Button -->
            <div class="text-right mt-4">
              <button 
              data-open-modal="add-advance-dns-modal"
              class="bg-[#3E7059] hover:bg-[#2b5944] text-white px-4 py-2 rounded">
                Add New Record
              </button>
            </div>
        </div>
    </main>

    <Modal
    id="delete-advance-dns-modal"
    confirmButtonText="Confirm"
    cancelButtonText="Cancel"
    disableFooter={true}
  >
    <h2 slot="header" class="text-xl font-semibold text-gray-100">
      Delete DNS Record
    </h2>
  
    <div slot="body">
      <p class="text-gray-100">
        Are you sure you want to delete all DNS records matching the following details?
      </p>
  
      <!-- Display Record Data -->
      <div class="mt-4 text-gray-100">
        <p>Record Name: <span id="delete-record-name"></span></p>
        <p>Record Type: <span id="delete-record-type"></span></p>
        <p>Record Content: <span id="delete-record-content"></span></p>
        <p>TTL: <span id="delete-record-ttl"></span></p>
      </div>
    </div>
  
    <p slot="warning" class="text-red-500">
      Deleting DNS records is irreversible.
    </p>
  
    <div slot="footer">
      <button
        class="delete-dns-record-confirm-button bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
      >
        Confirm
      </button>
      <button
      class="close-modal-button bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded ml-2"
      data-target="delete-advance-dns-modal"
    >
      Cancel
    </button>
    
    </div>
  </Modal>  


<!-- Add Advance DNS Modal -->

<Modal
id="add-advance-dns-modal"
confirmButtonText="Add Record"
cancelButtonText="Cancel"
>

</Modal>

<script>
import { setupModalListeners } from "@scripts/modalManager.ts";
import { setupDeleteDnsRecordButtonListener } from "@scripts/deleteAdvanceDNS.ts";

document.addEventListener('astro:page-load', () => {
    setupModalListeners();
    setupDeleteDnsRecordButtonListener();

    // Add event listeners to delete buttons
    const deleteButtons = document.querySelectorAll<HTMLButtonElement>('[data-open-modal="delete-advance-dns-modal"]');
    
    deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Get data from data attributes
            const recordName = button.getAttribute('data-record-name') || '';
            const recordType = button.getAttribute('data-record-type') || '';
            const recordContent = button.getAttribute('data-record-content') || '';
            const recordTtl = button.getAttribute('data-record-ttl') || '';

            // Populate modal content
            document.getElementById('delete-record-name')!.textContent = recordName;
            document.getElementById('delete-record-type')!.textContent = recordType;
            document.getElementById('delete-record-content')!.textContent = recordContent;
            document.getElementById('delete-record-ttl')!.textContent = recordTtl;
        });
    });
});

</script>
</Layout>