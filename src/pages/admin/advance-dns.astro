---
import Layout from "@components/Layout.astro";
import { verifySession } from "@lib/verifySession";
import { getUserRole } from "@lib/checkUserRole";
import { getCookieValue } from "@lib/utils/cookies";
import Modal from "@components/v2/Modal.astro";
import DeleteAdvanceDnsModal from "@components/DeleteAdvanceDnsModal.astro";

// Fetching the base domain data
const cookies = Astro.request?.headers.get("cookie") || "";
const baseDomainsURL = new URL("/api/v2/base-domains", Astro.url).href;
const selectedDomain = Astro.url.searchParams.get("zone") || ""; 

const response = await fetch(baseDomainsURL, {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    "Cookie": cookies,
  },
});
const { baseDomain, additionalBaseDomains } = await response.json();

// User session and role validation
const authToken = getCookieValue(cookies, "auth_token");
if (!authToken || !verifySession(authToken)) {
    return Astro.redirect("/");
}

const userRole = await getUserRole(Astro);
if (userRole !== "Super-Admin") {
    return Astro.redirect("/");
}

// If no domain is selected, redirect to the first available domain
if (!selectedDomain) {
    const firstDomain = baseDomain.domain || (additionalBaseDomains.length > 0 ? additionalBaseDomains[0].domain : null);
    if (firstDomain) {
        return Astro.redirect(`/admin/advance-dns?zone=${firstDomain}`);
    }
}

// Fetch DNS records if a domain is selected
let dnsRecords = [];
if (selectedDomain) {
  const dnsResponse = await fetch(new URL(`/api/v2/admin/advance-dns?zone=${selectedDomain}`, Astro.url).href, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Cookie": cookies,
    },
  });
  
  const dnsData = await dnsResponse.json();
  if (dnsData.success) {
    dnsRecords = dnsData.dnsRecords;
  }
}
---

<Layout title="Advance DNS Management">
    <main class="flex justify-center items-center mb-8 p-6">
        <div class="p-6 rounded-lg shadow-lg w-full max-w-6xl bg-[#2C3333]">
            <h1 class="text-white text-xl md:text-2xl text-center mb-4">
                Advanced DNS Management
            </h1>
            <p class="text-white text-center mb-6 text-lg">
                This is the Advanced DNS Management page. You can manage or add system DNS settings here. This feature is only available to Super Admins and is experimental, so expect changes in the future.
            </p>
            <div class="flex justify-center items-center mb-4">
                <a
                href="/admin"
                class="bg-[#2C6D6A] hover:bg-[#265E5A] text-gray-100 px-4 py-2 rounded-md inline-block align-middle"
            >
                Go Back to Admin Dashboard
            </a>
            </div>

                 <!-- Domain Selector Form -->
<form method="GET" class="mb-6">
  <label for="domainSelector" class="text-gray-100">Choose Domain:</label>
  <select id="domainSelector" name="zone" class="ml-2 p-2 bg-[#171717] text-white rounded" onchange="this.form.submit()">
    <!-- Main Base Domain -->
    <option value={baseDomain.domain} selected={selectedDomain === baseDomain.domain}>{baseDomain.domain}</option>

    <!-- Additional Base Domains -->
    {additionalBaseDomains.map((domain: { domain: string }) => (
      <option value={domain.domain} selected={selectedDomain === domain.domain}>{domain.domain}</option>
    ))}
  </select>
</form>


            <!-- DNS Records Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full bg-[#2C3333] text-white mt-6">
                  <thead>
                    <tr class="bg-[#3E7059]">
                      <th class="py-2 px-4 text-left">Type</th>
                      <th class="py-2 px-4 text-left">Name</th>
                      <th class="py-2 px-4 text-left">Value</th>
                      <th class="py-2 px-4 text-left">TTL</th>
                      <th class="py-2 px-4 text-left">Priority</th>
                      <th class="py-2 px-4 text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {dnsRecords.length > 0 ? (
                      dnsRecords.map((record: { name: string; record_type: string; contents: string[]; ttl: number; ids: number[] }) => 
                        <tr class="border-b border-gray-600">
                          <td class="py-2 px-4">{record.record_type}</td>
                          <td class="py-2 px-4">{record.name}</td>
                          <td class="py-2 px-4">
                            {record.record_type === 'TXT' 
                              ? record.contents.join(" ") 
                              : record.contents.join(", ")} <!-- Handle comma-separated contents or single TXT value -->
                          </td>
                          <td class="py-2 px-4">{record.ttl}</td>
                          <td class="py-2 px-4">
                            {record.record_type === 'MX' ? record.contents[0].split(' ')[0] : 'N/A'} <!-- Show priority for MX records -->
                          </td>
                          <td class="py-2 px-4">
                            <!-- Pass all associated IDs as a comma-separated string -->
                            <button
                              data-open-modal="add-advance-dns-modal"
                              data-mode="edit"
                              data-record-ids={record.ids.join(",")}
                              data-record-name={record.name}
                              data-record-type={record.record_type}
                              data-record-content={record.record_type === 'TXT' ? record.contents.join(" ") : record.contents.join(", ")}
                              class="bg-[#3E7059] hover:bg-[#2b5944] text-white px-3 py-1 rounded"
                            >
                              Edit
                            </button>
                            <button
                              data-open-modal="delete-advance-dns-modal"
                              data-record-ids={record.ids.join(",")}
                              data-record-name={record.name}
                              data-record-type={record.record_type}
                              data-record-content={record.contents.join(", ")}
                              data-record-ttl={record.ttl}
                              class="bg-[#B52626] hover:bg-[#9C2121] text-white px-3 py-1 rounded ml-2"
                            >
                              Delete
                            </button>
                          </td>
                        </tr>
                      )
                    ) : (
                      <tr>
                        <td colspan="6" class="py-2 px-4 text-center">No DNS records found for {selectedDomain}</td>
                      </tr>
                    )}
                  </tbody>             
                </table>
            </div>

            <!-- Add New Record Button -->
            <div class="text-right mt-4">
              <button 
                data-open-modal="add-advance-dns-modal"
                data-mode="add"
                class="bg-[#3E7059] hover:bg-[#2b5944] text-white px-4 py-2 rounded">
                  Add New Record
              </button>
            </div>
        </div>
    </main>

    <!-- Delete Advance DNS Modal -->
    <DeleteAdvanceDnsModal />

    <!-- Add/Update DNS Modal -->
    <Modal
      id="add-advance-dns-modal"
      confirmButtonText="Add Record"
      cancelButtonText="Cancel"
      disableFooter={true}
    >
      <h2 slot="header" class="text-xl font-semibold text-gray-100">
        Add or Update DNS Record For Zone: {selectedDomain}
      </h2>

      <div slot="body">
        <input type="text" name="prevent_autofill" id="prevent_autofill" style="display:none;" autocomplete="off">

        <label class="block mb-4 text-gray-100">
          Record Name:
          <input
            type="text"
            id="record-name-input"
            class="w-full px-3 py-2 border rounded mt-2 text-black disabled:opacity-50 disabled:cursor-not-allowed"
            placeholder="Enter record name"
            autocomplete="off"
          />
        </label>


        <label class="block mb-4 text-gray-100">
          Record Type:
          <select
            id="record-type-select"
            class="w-full px-3 py-2 border rounded mt-2 text-black"
          >
            <option value="A">A</option>
            <option value="AAAA">AAAA</option>
            <option value="TXT">TXT</option>
            <option value="CNAME">CNAME</option>
            <option value="ALIAS">ALIAS</option>
            <option value="MX">MX</option>
            <option value="NS">NS</option>
          </select>
        </label>

        <label class="block mb-4 text-gray-100" id="record-value-label">
          Record Value <span id="record-value-type">(one value per line)</span>:
          <textarea
            id="record-value-textarea"
            class="w-full px-3 py-2 border rounded mt-2 text-black"
            rows="6"
            placeholder="Enter each value on a new line, e.g., multiple IPs or MX records"
          ></textarea>
        </label>
      </div>

      <p slot="warning" class="text-red-500"></p>

      <div slot="footer">
        <button
          class="add-dns-record-confirm-button bg-[#3E7059] hover:bg-[#2b5944] text-white px-4 py-2 rounded"
        >
          Confirm
        </button>
        <button
          class="close-modal-button bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded ml-2"
          data-target="add-advance-dns-modal"
        >
          Cancel
        </button>
      </div>
    </Modal>


    <script>
    import { setupModalListeners } from "@scripts/modalManager";
    import { setupDeleteDnsRecordButtonListener } from "@scripts/deleteAdvanceDNS";
    import { setupAddOrUpdateDnsRecordButtonListener } from "@scripts/addOrUpdateDnsRecord";

    document.addEventListener('astro:page-load', () => {
      setupModalListeners();
      setupDeleteDnsRecordButtonListener();
      setupAddOrUpdateDnsRecordButtonListener();

      // Handle Add New Record Button
      const addNewRecordButton = document.querySelector<HTMLButtonElement>('[data-open-modal="add-advance-dns-modal"][data-mode="add"]');
      if (addNewRecordButton) {
        addNewRecordButton.addEventListener('click', () => {
          console.log("Add New Record button clicked");
          const modal = document.getElementById('add-advance-dns-modal') as HTMLDivElement | null;
          if (modal) {
            const recordNameInput = modal.querySelector<HTMLInputElement>('#record-name-input');
            const recordTypeSelect = modal.querySelector<HTMLSelectElement>('#record-type-select');
            const recordValueTextarea = modal.querySelector<HTMLTextAreaElement>('#record-value-textarea');
            const recordValueType = modal.querySelector<HTMLSpanElement>('#record-value-type');

            // Reset modal inputs for adding a new record
            if (recordNameInput) {
              console.log("Enabling Record Name Input for Add");
              recordNameInput.value = '';
              recordNameInput.disabled = false; // Ensure input is enabled for adding
            }
            if (recordTypeSelect) {
              recordTypeSelect.value = 'TXT'; // Set the default record type to 'TXT'
              updateRecordValueField('TXT', recordValueType, recordValueTextarea);
            }
            if (recordValueTextarea) recordValueTextarea.value = '';
          }
        });
      }

      // Handle Edit Buttons
      const editButtons = document.querySelectorAll<HTMLButtonElement>('[data-open-modal="add-advance-dns-modal"][data-mode="edit"]');
      editButtons.forEach(button => {
        button.addEventListener('click', () => {
          console.log("Edit button clicked");
          const modal = document.getElementById('add-advance-dns-modal') as HTMLDivElement | null;
          if (modal) {
            const recordIds = button.getAttribute('data-record-ids') || '';
            const recordName = button.getAttribute('data-record-name') || '';
            const recordType = button.getAttribute('data-record-type') || '';
            const recordContent = button.getAttribute('data-record-content') || '';

            const recordNameInput = modal.querySelector<HTMLInputElement>('#record-name-input');
            const recordTypeSelect = modal.querySelector<HTMLSelectElement>('#record-type-select');
            const recordValueTextarea = modal.querySelector<HTMLTextAreaElement>('#record-value-textarea');
            const recordValueType = modal.querySelector<HTMLSpanElement>('#record-value-type');

            // Populate modal with existing record data for editing
            if (recordNameInput) {
              console.log("Disabling Record Name Input for Edit");
              recordNameInput.value = recordName;
              recordNameInput.disabled = true; // Disable input for editing
            }
            if (recordTypeSelect) {
              recordTypeSelect.value = recordType;
              updateRecordValueField(recordType, recordValueType, recordValueTextarea);
            }
            if (recordValueTextarea) {
              recordValueTextarea.value = recordType === 'TXT' ? recordContent : recordContent.split(', ').join('\n');
            }

            // Store the record IDs in a hidden field or a data attribute for later use
            const editConfirmButton = modal.querySelector('.add-dns-record-confirm-button');
            if (editConfirmButton && recordIds) {
              editConfirmButton.setAttribute('data-record-ids', recordIds);
            }
          }
        });
      });

      // Handle Delete Buttons
      const deleteButtons = document.querySelectorAll<HTMLButtonElement>('[data-open-modal="delete-advance-dns-modal"]');
      deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
          const recordIds = button.getAttribute('data-record-ids') || '';
          const recordName = button.getAttribute('data-record-name') || '';
          const recordType = button.getAttribute('data-record-type') || '';
          const recordContent = button.getAttribute('data-record-content') || '';
          const recordTtl = button.getAttribute('data-record-ttl') || '';

          const deleteRecordName = document.getElementById('delete-record-name') as HTMLElement | null;
          const deleteRecordType = document.getElementById('delete-record-type') as HTMLElement | null;
          const deleteRecordContent = document.getElementById('delete-record-content') as HTMLElement | null;
          const deleteRecordTtl = document.getElementById('delete-record-ttl') as HTMLElement | null;
          const deleteRecordIdsInput = document.getElementById('delete-record-ids') as HTMLInputElement | null;

          // Populate delete modal with DNS record details
          if (deleteRecordName) deleteRecordName.textContent = recordName;
          if (deleteRecordType) deleteRecordType.textContent = recordType;
          if (deleteRecordContent) deleteRecordContent.textContent = recordContent;
          if (deleteRecordTtl) deleteRecordTtl.textContent = recordTtl;
          if (deleteRecordIdsInput) deleteRecordIdsInput.value = recordIds;
        });
      });

      // Handle changes in the Record Type select dropdown
      const modalElement = document.getElementById('add-advance-dns-modal') as HTMLDivElement | null;
      if (modalElement) {
        const recordTypeSelect = modalElement.querySelector<HTMLSelectElement>('#record-type-select');
        const recordValueTextarea = modalElement.querySelector<HTMLTextAreaElement>('#record-value-textarea');
        const recordValueType = modalElement.querySelector<HTMLSpanElement>('#record-value-type');

        if (recordTypeSelect && recordValueTextarea && recordValueType) {
          recordTypeSelect.addEventListener('change', (event) => {
            const selectedType = (event.target as HTMLSelectElement).value;
            updateRecordValueField(selectedType, recordValueType, recordValueTextarea);
          });
        }
      }

      /**
       * Updates the Record Value label and textarea based on the selected record type.
       * @param recordType The selected DNS record type.
       * @param labelTypeElement The span element for Record Value type.
       * @param textareaElement The textarea element for Record Value.
       */
      function updateRecordValueField(recordType: string, labelTypeElement: HTMLElement | null, textareaElement: HTMLTextAreaElement | null): void {
        if (!labelTypeElement || !textareaElement) return;

        if (recordType === 'TXT') {
          labelTypeElement.textContent = "(single value)";
          textareaElement.rows = 2;
          textareaElement.placeholder = "Enter single TXT record value";
        } else {
          labelTypeElement.textContent = "(one value per line)";
          textareaElement.rows = 6;
          textareaElement.placeholder = "Enter each value on a new line, e.g., multiple IPs or MX records";
        }
      }
    });
    </script>
</Layout>
